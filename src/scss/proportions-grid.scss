@use 'sass:math';
@import './settings/proportions-settings';
@import './mixins/media-queries';
@import './functions/get-fixed-rem-value';

@import './../../user-settings.conf';

$baseFontSize: ($proportionsGridBaseFontSize * 0.1rem);
$basePadding: getFixedRemValue(($proportionsGridBaseFontSize * 0.1rem) * $proportionsGridSpacingRatio);
$topBottomPadding: getFixedRemValue(($proportionsGridBaseFontSize * 0.1rem) * math.pow($proportionsGridSpacingRatio, 2));
$sidePadding: getFixedRemValue(($proportionsGridBaseFontSize * 0.1rem) * math.pow($proportionsGridSpacingRatio, 3));
$proportionsGridMarginTop: getFixedRemValue($proportionsGridSpacingRatio * 1em);
$proportionsGridMarginBottom: $baseFontSize;
$maxWidth: ($proportionsGridMaxWidth * 0.1rem);

/*! Proportions Grid v2.0.0 | Copyright (c) Beyond The Sketch Ltd | Licensed under MIT License */

// css variables
@if $proportionsGridUseCSSCustomProperties {
    :root {
        --pgrid-spacing-ratio: #{$proportionsGridSpacingRatio};
        --pgrid-base-font-size: #{$baseFontSize};
        --pgrid-base-padding: #{$basePadding};
        --pgrid-top-bottom-padding: #{$topBottomPadding};
        --pgrid-side-padding: #{$sidePadding};
        --pgrid-top-margin: #{$proportionsGridMarginTop};
        --pgrid-bottom-margin: #{$proportionsGridMarginBottom};
        --pgrid-max-width: #{$maxWidth};
    }
}

@import './proportions-grid.html';
@import './proportions-grid.elements';

// content ContaineR
.#{$proportionsGridClassPrefix}_cr {
    display: flex;
    box-sizing: border-box;
    flex-wrap: wrap;
    flex-direction: row;
    $justifyValue: '';
    @if $proportionsGridDefaultJustify == 'center' or $proportionsGridDefaultJustify == 'start' or $proportionsGridDefaultJustify == 'end' or $proportionsGridDefaultJustify == 'flex-start' or $proportionsGridDefaultJustify == 'flex-end' {
        $justifyValue: safe $proportionsGridDefaultJustify;
    }
    @else {
        $justifyValue: $proportionsGridDefaultJustify;
    }
    justify-content: $justifyValue;
    flex-basis: 100%;

    @include mobileAndSmaller {
        padding: 0 1rem;
    }

    // no wrap
    &.#{$proportionsGridClassPrefix}_n-w {
        flex-wrap: nowrap;
    }

    // center content widths in content container
    &[class*="#{$proportionsGridClassPrefix}_w"],
    &[class*="#{$proportionsGridClassPrefix}_p_w"] {
        margin-left: auto;
        margin-right: auto;
    }
}

// Widths - common
[class*="#{$proportionsGridClassPrefix}_w"],
[class*="#{$proportionsGridClassPrefix}_p_w"] {
    box-sizing: border-box;
    flex: 1 0 100%;
}

// Paddings
// Padded Widths
.#{$proportionsGridClassPrefix}_p,
[class*="#{$proportionsGridClassPrefix}_p_w"] {
    @include onlySmartphones {
        @if $proportionsGridUseCSSCustomProperties {
            padding: var(--pgrid-base-padding);
        }
        @else {
            padding: $basePadding;
        }
        max-width: 100vw;
    }
    
    @include phablets {
        @if $proportionsGridUseCSSCustomProperties {
            padding: var(--pgrid-top-bottom-padding) var(--pgrid-side-padding);
        }
        @else {
            padding: $topBottomPadding $sidePadding;
        }
    }
}

// Padding modifiers
.#{$proportionsGridClassPrefix}_p {
    @include onlySmartphones {
        &-h {   // horizontals - i.e. top and bottom
            @if $proportionsGridUseCSSCustomProperties {
                padding-top: var(--pgrid-base-padding);
                padding-bottom: var(--pgrid-base-padding);
            }
            @else {
                padding-top: $basePadding;
                padding-bottom: $basePadding;
            }
        }
        &-s {   // sides
            @if $proportionsGridUseCSSCustomProperties {
                padding-left: var(--pgrid-base-padding);
                padding-right: var(--pgrid-base-padding);
            }
            @else {
                padding-left: $basePadding;
                padding-right: $basePadding;
            }
        }
        &-l {   // left
            @if $proportionsGridUseCSSCustomProperties {
                padding-left: var(--pgrid-base-padding);
            }
            @else {
                padding-left: $basePadding;
            }
        }
        &-r {   // right
            @if $proportionsGridUseCSSCustomProperties {
                padding-right: var(--pgrid-base-padding);
            }
            @else {
                padding-right: $basePadding;
            }
        }
        &-t {   // top
            @if $proportionsGridUseCSSCustomProperties {
                padding-top: var(--pgrid-base-padding);
            }
            @else {
                padding-top: $basePadding;
            }
        }
        &-b {   // bottom
            @if $proportionsGridUseCSSCustomProperties {
                padding-bottom: var(--pgrid-base-padding);
            }
            @else {
                padding-bottom: $basePadding;
            }
        }
    }

    @include phablets {
        &-h {   // horizontals - i.e. top and bottom
            @if $proportionsGridUseCSSCustomProperties {
                padding-top: var(--pgrid-top-bottom-padding);
                padding-bottom: var(--pgrid-top-bottom-padding);
            }
            @else {
                padding-top: $topBottomPadding;
                padding-bottom: $topBottomPadding;
            }
        }
        &-s {   // sides
            @if $proportionsGridUseCSSCustomProperties {
                padding-left: var(--pgrid-side-padding);
                padding-right: var(--pgrid-side-padding);
            }
            @else {
                padding-left: $sidePadding;
                padding-right: $sidePadding;
            }
        }
        &-l {
            @if $proportionsGridUseCSSCustomProperties {
                padding-left: var(--pgrid-side-padding);
            }
            @else {
                padding-left: $sidePadding;
            }
        }
        &-r {
            @if $proportionsGridUseCSSCustomProperties {
                padding-right: var(--pgrid-side-padding);
            }
            @else {
                padding-right: $sidePadding;
            }
        }
        &-t {
            @if $proportionsGridUseCSSCustomProperties {
                padding-top: var(--pgrid-top-bottom-padding);
            }
            @else {
                padding-top: $topBottomPadding;
            }
        }
        &-b {
            @if $proportionsGridUseCSSCustomProperties {
                padding-bottom: var(--pgrid-top-bottom-padding);
            }
            @else {
                padding-bottom: $topBottomPadding;
            }
        }
    }

}


@mixin flexGrowOverride($width) {
    // modifiers
    // no grow/fill (i.e. do not allow flexible width
    &.#{$proportionsGridClassPrefix}_n-f,
    &.#{$proportionsGridClassPrefix}_n-g {
        flex-grow: 0;
        max-width: $width;
    }
}

// SMartPhone+ rules
.#{$proportionsGridClassPrefix}_w_1_4,
.#{$proportionsGridClassPrefix}_w_1_2,
.#{$proportionsGridClassPrefix}_p_w_1_4,
.#{$proportionsGridClassPrefix}_p_w_1_2 {
    flex: 1 0 50%;
}

@include onlySmartphones {
    .#{$proportionsGridClassPrefix}_sm_w_1,
    .#{$proportionsGridClassPrefix}_sm_p_w_1 {
        flex: 1 0 100%;
    }
    .#{$proportionsGridClassPrefix}_sm_w_1_4,
    .#{$proportionsGridClassPrefix}_sm_p_w_1_4 {
        flex: 1 0 25%;
    }
    .#{$proportionsGridClassPrefix}_sm_w_1_2,
    .#{$proportionsGridClassPrefix}_sm_p_w_1_2 {
        flex: 1 0 50%;
    }
}

// PHablet+ rules
@include phablets {
    .#{$proportionsGridClassPrefix}_w_1_4,
    .#{$proportionsGridClassPrefix}_p_w_1_4 {
        $width: 25%;
        flex: 1 0 $width;
        @include flexGrowOverride($width);
    }
    .#{$proportionsGridClassPrefix}_w_1_2,
    .#{$proportionsGridClassPrefix}_p_w_1_2 {
        @include flexGrowOverride(50%);
    }
    .#{$proportionsGridClassPrefix}_w_3_4,
    .#{$proportionsGridClassPrefix}_p_w_3_4 {
        $width: 75%;
        flex: 1 0 $width;
        @include flexGrowOverride($width);
    }
    
    .#{$proportionsGridClassPrefix}_w_1_3,
    .#{$proportionsGridClassPrefix}_p_w_1_3 {
        $width: math.div(100%, 3);
        flex: 1 0 $width;
        @include flexGrowOverride($width);
    }
    
    .#{$proportionsGridClassPrefix}_w_2_3,
    .#{$proportionsGridClassPrefix}_p_w_2_3 {
        $width: math.div(100%, 3) * 2;
        flex: 1 0 $width;
        @include flexGrowOverride($width);
    }
}

// TABlet+ rules
@include tablets {
    .#{$proportionsGridClassPrefix}_cr {
        &[class*="#{$proportionsGridClassPrefix}_w"],
        &[class*="#{$proportionsGridClassPrefix}_p_w"] {
            @if $proportionsGridUseCSSCustomProperties {
                max-width: var(--pgrid-max-width);
            }
            @else {
                max-width: $maxWidth;
            }
        }
    }
    
    .#{$proportionsGridClassPrefix}_w_1_4,
    .#{$proportionsGridClassPrefix}_p_w_1_4 {
        $width: 25%;
        flex: 1 0 25%;
        @include flexGrowOverride($width);
    }
}
